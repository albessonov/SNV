#include <stdio.h>
#include <stdlib.h>
#include "spinapi.h"
#include "malloc.h"
#include <string.h>
#include <math.h>
#define PBESRPRO

/*
*Функция наибольшего общего делителя
*@a,b - числа среди которых ищется НОД
*@return - НОД
*/

int NOD(int a, int b);

/*
* Функция создания 3-х мерного массива Data для дальнейшей передачи в функцию setPB()
* Состав [N_Channels, [Channel, N_Pulses, [T_start], [T_end]], ...]
* N_Channels - количество задействованых каналов.
* Массивы из 4 элементов в количестве N_channels штук:
* 1. Channel - номер канала
* 2. N_Pulses - количество импульсов в пакете
* 3. Массив времен начала импульсов
* 4. Массив времен конца импульсов
* Данные заполняются в строчку согласно списку выше. Функция сама распределяет элементы строки в подмассивы
*
* @*str строка с данными для заполнения массива
* @return ***Data - тройной указатель на массив
*/

__declspec(dllexport) int*** StrBuild(char* str);

/*Функция отладки. Не для экспорта в DLL*/

int check_pb();

/*
* Функция создания 3-х мерного массива Data для дальнейшей передачи в функцию setPB()
* Состав [N_Channels, [Channel, N_Pulses, [T_start], [T_end]], ...]
* N_Channels - количество задействованых каналов.
* Массивы из 4 элементов в количестве N_channels штук:
* 1. Channel - номер канала
* 2. N_Pulses - количество импульсов в пакете
* 3. Массив времен начала импульсов
* 4. Массив времен конца импульсов
*
* Ввод данных ручной
* @return ***Data - тройной указатель на массив
*/
__declspec(dllexport) int*** Build(void);

/*
* comp - функция сравнения для сортировки.
* Аргументы: два указателя на int (arg1, arg2).
* Возвращает: разницу значений (*arg1 - *arg2).
* Описание: Используется в qsort для сортировки массива по возрастанию.
*/
int comp(const int* arg1, const int* arg2);

/*
* Перемещает в конец повторяющиеся элементы, не удаляя их (необходимо для работы free())
*
* @*arr - указатель на массив
* @*size - указатель на размер массива
*
* @return просто код успешного выполнения
*/
int deleteRepeat(int* arr, int* size);

/*
* Перемещает в конец 0 элемент массива, как бы удаляя его. Уменьшает размер массива
*
* @*arr - указатель на массив
* @*size - указатель на размер массива
*
* @return код успешного выполнения
*/
int del(int* arr, int* size);

/*
* Функция загрузки в плату импульсной последовательности и запуска
* @***Data - 3х мерный массив датасета импульсной последовательности
* @repeat - время между концом и началом нового повторения импульсной последовательности
* @pulseTime, repTime - размерные множители времени. 1 - ns, 1e3 - us, 1e6 - ms, 1e9 - ns
* @return 0 - успешный пуск. -1 - ошибка
*/
__declspec(dllexport) int setPb(int*** Data, int repeat, int pulseTime, int repTime);

/*
* Функция создания PWM последовательностей. Не используется. Будет либо удалена, либо полностью переработана
*
* Фкнция создающая массив для функции setPb, представляет собой сборку массива для многоканальной ШИМ модуляции
* @int N - число рабочих каналов
* @int arr[][4] - массив характеристик [][0] - номер рабочего канала [0][1] - Период, [0][2] Коэф заполнения в %, [0][3] сдвиг фазы.
* @int time - размероность времени ms, us, ns
*
*/
__declspec(dllexport) int pb_PWM(int N, int arr[][4], int time);

/*
* Функция загрузки в плату импульсной последовательности БЕЗ ЗАПУСКА
* @***Data - 3х мерный массив датасета импульсной последовательности
* @repeat - время между концом и началом нового повторения импульсной последовательности
* @pulseTime, repTime - размерные множители времени. 1 - ns, 1e3 - us, 1e6 - ms, 1e9 - ns
* @return 0 - успешный пуск. -1 - ошибка
*/
__declspec(dllexport) int setPb_cold(int*** Data, int repeat, int pulseTime, int repTime);

/*
* Функция открытия (инициализации) и старта платы
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_Istart(void);
/*
* Функция открытия (инициализации) и остановки платы
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_Istop(void);

/*
* Функция открытия (инициализации платы)
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_I(void);

/*
* Функция открытия (инициализации платы)
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_S(void);

/*
* Функция открытия (инициализации платы)
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_R(void);

/*
* Функция открытия (инициализации платы)
* @return 0 - успех, -1 - ошибка
*/
__declspec(dllexport) int pb_C(void);



